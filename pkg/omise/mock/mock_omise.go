// Code generated by MockGen. DO NOT EDIT.
// Source: omise.go

// Package mock_omisecli is a generated GoMock package.
package mock_omisecli

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	omise "github.com/omise/omise-go"
	operations "github.com/omise/omise-go/operations"
)

// MockOmiseClient is a mock of OmiseClient interface.
type MockOmiseClient struct {
	ctrl     *gomock.Controller
	recorder *MockOmiseClientMockRecorder
}

// MockOmiseClientMockRecorder is the mock recorder for MockOmiseClient.
type MockOmiseClientMockRecorder struct {
	mock *MockOmiseClient
}

// NewMockOmiseClient creates a new mock instance.
func NewMockOmiseClient(ctrl *gomock.Controller) *MockOmiseClient {
	mock := &MockOmiseClient{ctrl: ctrl}
	mock.recorder = &MockOmiseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOmiseClient) EXPECT() *MockOmiseClientMockRecorder {
	return m.recorder
}

// CreateCharge mocks base method.
func (m *MockOmiseClient) CreateCharge(result *omise.Charge, createCharge *operations.CreateCharge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharge", result, createCharge)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCharge indicates an expected call of CreateCharge.
func (mr *MockOmiseClientMockRecorder) CreateCharge(result, createCharge interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharge", reflect.TypeOf((*MockOmiseClient)(nil).CreateCharge), result, createCharge)
}

// CreateToken mocks base method.
func (m *MockOmiseClient) CreateToken(result *omise.Card, createToken *operations.CreateToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", result, createToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockOmiseClientMockRecorder) CreateToken(result, createToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockOmiseClient)(nil).CreateToken), result, createToken)
}
